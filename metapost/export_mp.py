#!/usr/bin/env python3

import subprocess

class Glyph:
    def __init__(self, id: int, name: str, nabc_code: str, mp_code: str):
        self.id = id
        self.name = name
        self.nabc_code = nabc_code
        self.mp_code = mp_code

    def __str__(self):
        return f"{self.id} : {self.name}"

    def to_mp(self):
        res = f"beginfig({self.id});\n"
        res += f"% {self.name}\n"
        res += f"% {self.nabc_code}\n"
        res += mp_code + "\n"
        res += "endfig;\n"
        return res

    def to_tex_tabular_row(self, fontname):
        return str(self.id) + " & " + "\\texttt{" + self.nabc_code + "} & " + self.name + " & " + "\\includegraphics[scale=0.44]{" + fontname + str(self.id) + ".eps} \\\\"


if __name__ == "__main__":
    ##### Collect the glyphs from the buranus.mp file #####
    fontname = "buranus"

    f = open(fontname + ".mp", "r")
    lines = f.read().splitlines()
    glyphs = []
    i = 0
    id = 0
    while not lines[i].startswith("bye"):
        if lines[i].startswith("beginfig"):
            # Create and append new glyph
            id += 1
            name = lines[i + 1][2:]
            nabc_code = lines[i + 2][2:]
            k = i + 3
            while not lines[k].startswith("endfig"):
                k += 1
            mp_code = "\n".join(lines[i+3:k])
            glyphs.append(Glyph(id, name, nabc_code, mp_code))
            i = k + 1
        else:
            i += 1
    f.close()

    print(f"Collected {len(glyphs)} glyphs.")

    ##### Create the glyph images with the bash command mp #####

    subprocess.run("mpost " + fontname + ".mp", shell=True)

    ##### Create the proofs .tex file #####

    out_tex_filename = fontname + "_proofs.tex"

    out_tex_file = open(out_tex_filename, "w")
    out_tex_file.write("% Proofs created by script export_mp.py\n\n")
    out_tex_file.write("\\documentclass{scrarticle}\n\n")
    out_tex_file.write("\\usepackage{mp_style}\n\n")
    out_tex_file.write("\\usepackage{longtable}\n\n")
    out_tex_file.write("\\begin{document}\n\n")
    out_tex_file.write("Proofs for the glyphs generated by \\texttt{" + fontname + ".mp}.\n\n")
    out_tex_file.write("\\vspace{1cm}\n\n")
    out_tex_file.write("\\begin{longtable}{l|l|l|l}\n")

    out_tex_file.write("\n".join([glyph.to_tex_tabular_row(fontname=fontname) for glyph in glyphs]))

    out_tex_file.write("\\end{longtable}\n\n")

    out_tex_file.write("\\end{document}\n")
    out_tex_file.close()

    print(f"Created proofs file {out_tex_filename}." )

    ##### Compile the .tex file #####

    subprocess.run("lualatex -src -interaction=nonstopmode " + out_tex_filename, shell=True)

    ##### Export glyphs' table on the file {fontname}_dict.py #####

    out_py_filename = fontname + "_dict.py"
    out_py_file = open(out_py_filename, "w")
    out_py_file.write("NABC_TO_FONT_ID = {\n")
    out_py_file.write("\t'?': 0,\n")
    for glyph in glyphs:
        out_py_file.write(f'\t"{glyph.nabc_code}": {glyph.id},\n')
    out_py_file.write("}")
    out_py_file.close()

    ##### Copy the dict.py file in staticfiles and tei-gen #####
    subprocess.run(f"cp buranus_dict.py ../staticfiles/tei", shell=True)
    subprocess.run(f"cp buranus_dict.py ../tei-gen", shell=True)

    ##### Convert the PDF files to SVG, and copy them to the staticfiles folder as well #####

    for (x, glyph) in enumerate(glyphs):
        subprocess.run(f"pdf2svg {fontname}{x+1}-eps-converted-to.pdf svg/{fontname}{x+1}.svg", shell=True)
        subprocess.run(f"cp svg/{fontname}{x+1}.svg ../staticfiles/img/svg", shell=True)

    ##### Move the EPS files and PDF files in the corresponding subfolders #####

    for (x, glyph) in enumerate(glyphs):
        subprocess.run(f"mv {fontname}{x+1}.eps eps/{fontname}{x+1}.eps", shell=True)
        subprocess.run(f"mv {fontname}{x+1}-eps-converted-to.pdf pdf/{fontname}{x+1}.pdf", shell=True)
